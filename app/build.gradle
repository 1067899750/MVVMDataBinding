apply plugin: 'com.android.application'
// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
//配置秘钥
def keystorePropertiesFile = rootProject.file("keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

static def buildTime() {
    return new Date().format("yyyyMMdd");
}


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        flavorDimensions "versionCode"//多环境打包设置
        //添加多 dex分包支持
        multiDexEnabled true
        ndk {
            // 设置支持的SO库架构（第三方腾讯bug上传含有多个SO库架构）
            abiFilters 'armeabi', 'x86', 'armeabi-v7a'
            //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        //打包时间
        resValue "string", "build_time", buildTime()
        //保留中文和英文国际化支持
        resConfigs "en", "zh"

    }

    /*****************************************打包设置开始**********************************************/
    //自定义生成的apk的地址及名称
    def apkName
    /**
     * 配置秘钥
     */
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            //混淆
            minifyEnabled false
            // proguard-android.txt 表示 Android 系统为我们提供的默认混淆规则文件
            // proguard-rules.pro 则是我们想要自定义的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false //禁止使用dug调试
            apkName = "element.apk"
            //签名
            signingConfig signingConfigs.release
        }

        debug {
//            signingConfig signingConfigs.release
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            debuggable true
            apkName = "element.apk"
        }


        debugUat {
            signingConfig signingConfigs.release
            //给applicationId添加后缀“.debugUat”
            applicationIdSuffix ".debugUat"
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            debuggable true
            shrinkResources false
            apkName = "element.apk"

        }
    }

    android.applicationVariants.all { variant ->
        def buildType = variant.buildType.name
        def productFlavor = variant.flavorName

        resValue "string", "app_client", rootProject.ext[productFlavor]["app_client"]
        resValue "string", "mall_base_url", rootProject.ext[productFlavor][buildType]
        resValue "string", "base_url", rootProject.ext[productFlavor][buildType]
        buildConfigField "String", "QQ_APPID", rootProject.ext[productFlavor]["qq_appid_app_key"]
        buildConfigField "String", "APP_ID", rootProject.ext[productFlavor]["app_id_app_key"]

        //配置参数信息 和 productFlavors中的不能同时存在
        if (buildType.contains("debug")) {
            variant.mergedFlavor.manifestPlaceholders = [app_name        : rootProject.ext[productFlavor]["app_name"],
                                                         app_icon        : rootProject.ext[productFlavor]["app_icon"],
                                                         app_package     : rootProject.ext[productFlavor]["application_package"],
                                                         "APP_ID"        : rootProject.ext[productFlavor]["app_id_app_key"],

                                                         baidu_app_key   : rootProject.ext[productFlavor]["baidu_app_key"],
                                                         GETUI_APP_ID    : rootProject.ext[productFlavor]["getui_app_id_debug"],
                                                         GETUI_APP_KEY   : rootProject.ext[productFlavor]["getui_app_key_debug"],
                                                         GETUI_APP_SECRET: rootProject.ext[productFlavor]["getui_app_secret_debug"],]
        } else {
            variant.mergedFlavor.manifestPlaceholders = [app_name        : rootProject.ext[productFlavor]["app_name"],
                                                         app_icon        : rootProject.ext[productFlavor]["app_icon"],
                                                         app_package     : rootProject.ext[productFlavor]["application_package"],
                                                         "APP_ID"        : rootProject.ext[productFlavor]["app_id_app_key"],

                                                         baidu_app_key   : rootProject.ext[productFlavor]["baidu_app_key"],
                                                         GETUI_APP_ID    : rootProject.ext[productFlavor]["getui_app_id_debug"],
                                                         GETUI_APP_KEY   : rootProject.ext[productFlavor]["getui_app_key_debug"],
                                                         GETUI_APP_SECRET: rootProject.ext[productFlavor]["getui_app_secret_debug"],]
        }

        variant.outputs.all {
            if (outputFileName.endsWith('.apk')) {
                //这里使用之前定义apk文件名称
                outputFileName = buildTime() + "_" + apkName
            }
        }
    }
    /************************************打包设置结束******************************************/

    /**********************************多环境打包设置开始******************************************/
    productFlavors {
        //APP1
        develop {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "1"

            applicationId rootProject.ext["develop"]["application_id"]
            versionCode rootProject.ext["develop"]["version_code"]
            versionName rootProject.ext["develop"]["version_name"]
        }
        //APP2
        check {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "2"

            applicationId rootProject.ext["check"]["application_id"]
            versionCode rootProject.ext["check"]["version_code"]
            versionName rootProject.ext["check"]["version_name"]

        }
        //APP3
        product {
            dimension "versionCode"
            buildConfigField "int", "ENV_TYPE", "3"
            applicationId rootProject.ext["product"]["application_id"]
            versionCode rootProject.ext["product"]["version_code"]
            versionName rootProject.ext["product"]["version_name"]
        }
    }
    /**************************************多环境打包设置结束******************************************/

    /**
     *  代码混淆
     */
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    /**
     * 添加多 dex分包支持 ,4.4系统上
     */
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
        additionalParameters += '--multi-dex'
        additionalParameters += '--set-max-idx-number=35000'
        //每个包内方法数上限（根据实际项目配置这个数，来适配4.0-4.4一些低端机型，因为拆分的dex太大，这些低端机型加载不了dex）
        additionalParameters += '--minimal-main-dex'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    dataBinding {
        enabled true
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    //分包
    implementation rootProject.ext.dependencies.multidex
    if (!isModule.toBoolean()) {
        implementation project(path: ':moduleCore:z_module_news')
        implementation project(path: ':moduleCore:z_module_service')
        implementation project(path: ':moduleCore:z_module_area')
        implementation project(path: ':moduleCore:z_module_user')
    }

    implementation project(path: ':z_model_main')
    implementation project(path: ':modulePublic:z_lib_common')

}














